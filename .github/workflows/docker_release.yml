name: One App Docker Release
on:
  push:
    tags:
      - '*'
  repository_dispatch:
    types: [one-app-docker-release]
jobs:
  one-app-docker-release:
    name: Build and Deploy to Docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Setup .npmrc file to publish to npm
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Set env
        id: set_tag_version
        run: |
          #Checks for when a valid tag is manually pushed
          if [[ $GITHUB_REF != "" && "${{ github.event.client_payload.tagversion }}" == "" ]]; then
          echo ::set-output name=tagversion::$(egrep -o '(v[0-9]+\.[0-9]+\.[0-9]+)(-\S*)?' <<< $GITHUB_REF)
          else
          #Runs when a tag is triggered automatically
          echo ::set-output name=tagversion::${{ github.event.client_payload.tagversion }}
          fi
          echo $tagversion
      - name: Check Tag Version
        run: |
          if [[ "${{ steps.set_tag_version.outputs.tagversion }}" == ""  ]]; then
          echo "::error::Incorrect tag provided, please provide a tag with the correct format and try again"
          exit 1
          fi
      - name: Docker tag version
        id: set_docker_tag_version
        run: |
          tagversion=${{ steps.set_tag_version.outputs.tagversion}}
          echo ::set-output name=dockertag::$(sed 's/^v*//' <<< "$tagversion")
      - name: Docker tag version
        run: echo $get_docker_tag
      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USER }} --password-stdin
      - name: Build production docker image
        run: docker build -t prod .
      - name: Extract and zip production statics
        run: |
          docker cp $(docker create prod):opt/one-app/build ./one-app-statics
          zip -r one-app-static-assets one-app-statics/build
      - name: Publish statics to NPM
        run: npm publish ./one-app-statics --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - name: Build development docker image
        run: docker build -t dev . --target=development
      - name: Tag Docker Images
        run: |
          docker tag prod ${{ secrets.DOCKER_USER }}/one-app:${{ steps.set_docker_tag_version.outputs.dockertag}}
          docker tag dev ${{ secrets.DOCKER_USER }}/one-app-dev:${{ steps.set_docker_tag_version.outputs.dockertag }}
          docker tag prod ${{ secrets.DOCKER_USER }}/one-app:latest
          docker tag dev ${{ secrets.DOCKER_USER }}/one-app-dev:latest
      - name: Push Docker Images
        run: |
          docker push ${{ secrets.DOCKER_USER }}/one-app:${{ steps.set_docker_tag_version.outputs.dockertag}}
          docker push ${{ secrets.DOCKER_USER }}/one-app-dev:${{ steps.set_docker_tag_version.outputs.dockertag}}
          docker push ${{ secrets.DOCKER_USER }}/one-app:latest
          docker push ${{ secrets.DOCKER_USER }}/one-app-dev:latest
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.set_tag_version.outputs.tagversion }}
          release_name: Release ${{ steps.set_tag_version.outputs.tagversion }}
          draft: false
          prerelease: false
      - name: Upload Release Assets
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./one-app-static-assets.zip
          asset_name: one-app-static-assets.zip
          asset_content_type: application/zip
